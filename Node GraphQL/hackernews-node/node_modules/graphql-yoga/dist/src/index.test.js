"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var ava_1 = require("ava");
var index_1 = require("./index");
var util_1 = require("util");
var request = require("request-promise-native");
ava_1.default.beforeEach('start hello world', function (t) { return __awaiter(_this, void 0, void 0, function () {
    var typeDefs, resolvers, server, http, port, uri;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                typeDefs = "\n    type Query {\n        hello(name: String): String!\n    }\n    ";
                resolvers = {
                    Query: {
                        hello: function (_, _a) {
                            var name = _a.name;
                            return "Hello " + (name || 'World');
                        },
                    },
                };
                server = new index_1.GraphQLServer({ typeDefs: typeDefs, resolvers: resolvers });
                return [4 /*yield*/, server.start({ port: 0 })];
            case 1:
                http = _a.sent();
                port = http.address().port;
                uri = "http://localhost:" + port + "/";
                t.context.http = http;
                t.context.uri = uri;
                return [2 /*return*/];
        }
    });
}); });
ava_1.default.afterEach.always('stop hello world', function (t) { return __awaiter(_this, void 0, void 0, function () {
    var http;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                http = t.context.http;
                return [4 /*yield*/, util_1.promisify(http.close).call(http)];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); });
ava_1.default('works with simple hello world server', function (t) { return __awaiter(_this, void 0, void 0, function () {
    var uri, query, body;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                uri = t.context.uri;
                query = "\n    query {\n        hello(name: \"Sarah\")\n    }\n  ";
                return [4 /*yield*/, request({
                        uri: uri,
                        method: 'POST',
                        json: true,
                        body: { query: query },
                    }).promise()];
            case 1:
                body = _a.sent();
                t.deepEqual(body, {
                    data: {
                        hello: 'Hello Sarah',
                    },
                });
                return [2 /*return*/];
        }
    });
}); });
//# sourceMappingURL=index.test.js.map